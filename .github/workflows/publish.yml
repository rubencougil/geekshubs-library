name: Publish

on:
  push:
    branches: [ main ]

jobs:

  build:
    name: Publish
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        fetch-depth: '0'

    - name: Tag
      uses: ChloePlanet/github-tag-action@master
      id: tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        RELEASE_BRANCHES: main

    - name: Publish Docker Image
      if: ${{ steps.tag.outputs.tag_generated == 1 }}
      uses: machine-learning-apps/gpr-docker-publish@master
      id: docker
      with:
        IMAGE_NAME: 'geekshubs-library_app'
        TAG: ${{ steps.tag.outputs.new_tag }}
        DOCKERFILE_PATH: 'Dockerfile'
        BUILD_CONTEXT: '.'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Binaries
      if: ${{ steps.tag.outputs.tag_generated == 1 }}
      run: make build

    - name: Create Release
      if: ${{ steps.tag.outputs.tag_generated == 1 }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.new_tag }}
        release_name: Release ${{ steps.tag.outputs.new_tag }}
        draft: false
        prerelease: false

    - name: Upload Binaries to Release (Darwin)
      if: ${{ steps.tag.outputs.tag_generated == 1 }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/main-darwin-amd64
        asset_name: main-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Upload Binaries to Release (Linux)
      if: ${{ steps.tag.outputs.tag_generated == 1 }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/main-linux-amd64
        asset_name: main-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload Binaries to Release (Windows)
      uses: actions/upload-release-asset@v1
      if: ${{ steps.tag.outputs.tag_generated == 1}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/main-windows-amd64
        asset_name: main-windows-amd64.exe
        asset_content_type: application/octet-stream

    - name: Install SSH key
      if: ${{ steps.tag.outputs.tag_generated == 1 }}
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.HOST_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

#    - name: Deploy
#      if: ${{ steps.tag.outputs.tag_generated == 1 }}
#      run: |
#        docker context create remote --docker "host=ssh://${{ secrets.HOST_USER }}@${{ secrets.HOST_ADDR }}"
#        docker --context remote login -u ${{ secrets.GH_PKG_USER }} -p ${{ secrets.GH_PKG_TOKEN }} docker.pkg.github.com
#        COMPOSE_HTTP_TIMEOUT=120 TAG=${{ steps.tag.outputs.new_tag }} docker-compose --context remote -f docker-compose-prod.yml pull app
#        COMPOSE_HTTP_TIMEOUT=120 TAG=${{ steps.tag.outputs.new_tag }} docker-compose --context remote -f docker-compose-prod.yml up -d app
